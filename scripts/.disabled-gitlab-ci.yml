NOTE: before re-enabling this file, please re-enable its reference to it in scripts/bump.fsx

stages:
  - buildenv
  - build
  - unit_tests
  - integration_tests
  - end2end_tests
  - package

stockmono_buildenv:
  image: docker:19.03.12
  stage: buildenv
  services:
    - docker:19.03.12-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA -f scripts/stockmono.docker .
    - docker push $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA

stockmono_build:
  image: $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA
  stage: build
  script:
    - mono --version

    - ./configure.sh
    - make strict
    - make
    - make sanitycheck
    - make install

stockmono_test_unit:
  image: $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA
  stage: unit_tests
  script:
    - mono --version

    - ./configure.sh
    - make
    - make check

stockmono_test_integration:
  image: $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA
  stage: integration_tests
  script:
    - mono --version

    - ./configure.sh
    - make
    - make update-servers

stockmono_test_end2end:
  image: $CI_REGISTRY_IMAGE/stock_env:$CI_COMMIT_SHA
  stage: end2end_tests
  artifacts:
    when: on_failure
    paths:
      - end2end-stockmono.txt
  script:
    - source ./scripts/install_regtest_dependencies.sh

    - apt install -y timelimit nunit-console
    - ./configure.sh
    - make
    - timeout 125m make check-end2end | tee end2end-stockmono.txt

newmono_buildenv:
  image: docker:19.03.12
  stage: buildenv
  services:
    - docker:19.03.12-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA -f scripts/newmono.docker .
    - docker push $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA

newmono_build:
  image: $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA
  stage: build
  artifacts:
    paths:
      - bin/*.zip
    expire_in: 50days
  script:
    - ./configure.sh
    - make strict
    - make
    - make sanitycheck
    - make install
    # so that we log the version of nuget for when it works
    - make nuget

    - make zip

newmono_test_unit:
  image: $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA
  stage: unit_tests
  script:

    - time (./configure.sh && make && make check)

newmono_test_integration:
  image: $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA
  stage: integration_tests
  script:
    - ./configure.sh &&
      make &&
      make update-servers

newmono_test_end2end:
  image: $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA
  stage: end2end_tests
  artifacts:
    when: on_failure
    paths:
      - end2end-newmono.txt
  script:
    - source ./scripts/install_regtest_dependencies.sh

    - apt install -y timelimit nunit-console

    - time (./configure.sh && make && timeout 125m make check-end2end | tee end2end-newmono.txt )

newmono_nuget:
  image: $CI_REGISTRY_IMAGE/new_env:$CI_COMMIT_SHA
  stage: package
  variables:
    DEFAULT_REF_TO_NUGET_PUSH: "*lightning*"
  script:
    - ./scripts/install_mono_from_microsoft_deb_packages.sh
    - ./configure.sh
    - make
    - ./scripts/nugetPush.fsx 0.3.325.0 $NUGET_API_KEY

#
# Disabled snap generation because of https://bugs.launchpad.net/snappy/+bug/1660957/comments/2
#
#stockmono_snap:
#  image: ubuntu:20.04
#  stage: package
#
#  variables:
#    # Fixes:
#    # "Cannot connect to the Docker daemon. Is the docker daemon running on this host?"
#    DOCKER_HOST: tcp://docker:2375
#  services:
#    # To support docker-in-docker
#    - docker:dind
#
#  script:
#    - ./scripts/snap_build_and_upload_as_docker.sh
#
#  artifacts:
#    paths:
#      - "*.snap"
#    expire_in: 50days

