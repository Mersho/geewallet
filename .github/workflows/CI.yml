name: CI

on: [push, pull_request]

# FIXME: figure out why we need to clean after make if we
# want 'make strict' target to really happen without
# assuming the binaries from previous build are good
# (msbuild bug?)

jobs:
  macOS:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make
    - name: sanity check
      run: make sanitycheck
    - name: unit tests
      run: make check
    - name: build in STRICT mode
      run: git clean -fdx && ./configure.sh && make strict
    - name: build in RELEASE mode
      run: git clean -fdx && ./configure.sh && make release
    - name: integration tests
      run: make update-servers

  windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v1
    - name: configure
      run: .\configure.bat
    - name: build in DEBUG mode
      run: .\make.bat
    - name: sanity check
      run: .\make.bat sanitycheck
    - name: unit tests
      run: .\make.bat check
    - name: re-build in STRICT mode
      run: git clean -fdx && .\configure.bat && .\make.bat strict
    - name: re-build in RELEASE mode
      run: git clean -fdx && .\configure.bat && .\make.bat release
    - name: integration tests
      run: .\make update-servers

  linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: install dependencies
      run: sudo apt install --yes fsharp nunit-console
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make
    - name: sanity check
      run: make sanitycheck
    - name: unit tests
      run: make check
    - name: build in STRICT mode
      run: git clean -fdx && ./configure.sh && make strict
    - name: build in RELEASE mode
      run: git clean -fdx && ./configure.sh && make release
    - name: integration tests
      run: make update-servers

  snap_pkg_build:
    needs: [linux, windows, macOS]
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: Generate snap package
      run: |
        sudo apt update
        ./scripts/install_snapcraft.sh
        sudo ./scripts/snap_build.sh

    - name: Upload snap package as artifact
      uses: actions/upload-artifact@v1
      with:
        name: snap
        path: gwallet_0.2.313.0_amd64.snap

  snap_pkg_upload:
    needs: snap_pkg_build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact from previous job
      uses: actions/download-artifact@v1
      with:
        name: snap
    - name: Upload snap package to Snap Store
      env:
        SNAPCRAFT_LOGIN: ${{ secrets.SNAPCRAFT_LOGIN }}
      run: |
        sudo apt update
        sudo apt install --yes fsharp
        ./scripts/install_snapcraft.sh
        ./configure.sh && ./scripts/snap_release.sh
